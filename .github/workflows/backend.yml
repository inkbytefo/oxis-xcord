name: Backend CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend.yml'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, messaging-service, server-management-service, voice-service]
    defaults:
      run:
        working-directory: ./backend/${{ matrix.service }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './backend/${{ matrix.service }}/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Build
      run: npm run build || true

    - name: Test
      run: npm run test || true

    - name: Docker login
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: ./backend/${{ matrix.service }}
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    needs: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, messaging-service, server-management-service, voice-service]
    defaults:
      run:
        working-directory: ./backend/${{ matrix.service }}

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './backend/${{ matrix.service }}/package-lock.json'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: npm audit

    - name: Code scanning
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
        queries: security-and-quality

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  deploy:
    needs: [build-and-test, security]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, auth-service, messaging-service, server-management-service, voice-service]

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Docker login
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Pull latest image
      run: docker pull ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest || true

    - name: Tag image with latest
      run: docker tag ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest

    - name: Push image to registry
      run: docker push ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest

    - name: Update ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ secrets.ECS_CLUSTER_NAME }} \
          --service ${{ matrix.service }} \
          --force-new-deployment